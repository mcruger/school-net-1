/**
 * Created with IntelliJ IDEA.
 * User: LEWIS
 * Date: 2/7/14
 * Time: 7:56 PM
 * To change this template use File | Settings | File Templates.
 */

import java.net.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;

/*******************************************

 NOTE:
 I used the -D option to pass my flags as -Dkey=value so I didn't have to parse them from args.
 example usage below. You can use either FQDN or ip for host flag.

 example usage:
 java -Dport=6789 SimpleWebServer

 ********************************************/

public class SimpleWebServer {
    public static void main(String[] args) throws IOException {



        //open redirects file, parse redirect values, and store in arraylist
        ArrayList redirectVals = new ArrayList<String>();
        try{
            Scanner scan = new Scanner(new File("www/redirects.def"));

            // /process each line of the redirects file...
            while(scan.hasNextLine()){
                String strNextLine = scan.nextLine();
                String[] strLineValues = strNextLine.split(";");

                //make sure the line isn't blank before we parse it for redirects
                if (!strNextLine.equals("")){
                    String redirectReq = strLineValues[0].trim();
                    String redirectTarget = strLineValues[1].trim();
                    //create redirects object to hold requested and target values
                    redirectVals.add(new Redirects(redirectReq, redirectTarget));
                }
            }
        }  catch(FileNotFoundException e){
            System.out.println("Redirects file not found. No redirects will be picked up. ");
        }




        //get value passed in from port flag
        String port = System.getProperty("port");
        String requestLine;
        String fileName;

        //validate port flag, show usage if incorrect
        if (port == null || port.isEmpty() || port == "") {
            System.err.println("Usage: java -Dport=<port number> SimpleWebServer");
            System.exit(1);
        }



        //set port string from flag to int
        int portNum = Integer.parseInt(port);

        try {
            //init ServerSocket and Socket to send/receive messages from client
            ServerSocket serverSocket = new ServerSocket(portNum);
            Socket clientSocket = serverSocket.accept();

            //init PrintWriter and BufferedReader to send/receive messages to/from client socket
            DataOutputStream out = new DataOutputStream(clientSocket.getOutputStream());
            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));


            String inputLine;
            //while (true) {
                //read in request line and tokenize
                requestLine = in.readLine();
                StringTokenizer tokenizedRequest = new StringTokenizer(requestLine);

                //handle GET request
                if (tokenizedRequest.nextToken().equals("GET")){

                    //filename can be grabbed from next token in header
                    fileName = tokenizedRequest.nextToken();
                    if (fileName.startsWith("/") == true ){
                        fileName = fileName.substring(1);
                    }

                    //http://docs.oracle.com/javase/7/docs/api/java/io/FileInputStream.html
                    File file = new File(fileName);
                    //file.o
                    int numBytes = (int) file.length();
                    FileInputStream inFile = new FileInputStream (fileName);
                    byte[] fileInBytes = new byte[numBytes];
                    inFile.read(fileInBytes);

                    out.writeBytes("HTTP/1.0 200 Document Follows\r\n");
                    if (fileName.endsWith(".jpg"))
                        out.writeBytes("Content-Type: image/jpeg\r\n");
                    if (fileName.endsWith(".png"))
                        out.writeBytes("Content-Type: image/png\r\n");
                    if (fileName.endsWith(".gif"))
                        out.writeBytes("Content-Type: image/gif\r\n");
                        out.writeBytes("Content-Length: " + numBytes + "\r\n");
                        out.writeBytes("\r\n");
                        out.write(fileInBytes, 0, numBytes);
                        serverSocket.close();
                }
                else {

                    System.out.println("Bad Request Message");
                }
           //}
            //trouble reading in multiple requests in loop like below from original server code
            /*
            //capture input sent from client
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                //echo the message received from client back out to the client
                out.println(inputLine);
                //output the message to console received from the client
                System.out.println(inputLine);
            }
            */
        } catch (IOException e) {
            //catch errors listening on port used for server/client socket connections
            System.out.println("Error listening on port "+ portNum + " or listening for a connection");
            System.out.println(e.getMessage());
        }
    }
}

